# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    env:
      VERSION: 0.9.0
      BUILD_NUMBER: ${{ github.run_number }}
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Prepare IMAGE_TAG
        run: |
          echo "IMAGE_TAG=$VERSION.$(($BUILD_NUMBER + 107))" >> $GITHUB_ENV
          IFS='.' read -ra PARTS <<< "$VERSION"
          echo "TAG_1=${PARTS[0]}" >> $GITHUB_ENV
          echo "TAG_2=${PARTS[0]}.${PARTS[1]}" >> $GITHUB_ENV
          echo "TAG_3=${PARTS[0]}.${PARTS[1]}.${PARTS[2]}" >> $GITHUB_ENV

      - uses: actions/github-script@v3
        id: tag-source
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          result-encoding: string
          script: |
            github.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "refs/tags/${{ env.IMAGE_TAG }}",
              sha: context.sha
            });

            try {
                github.git.deleteRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: "tags/${{ env.TAG_1 }}"
                });
            } catch(e) {
                console.log('Tag does not exist yet: ' + e);
            }

            github.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "refs/tags/${{ env.TAG_1 }}",
              sha: context.sha
            });

            try {
                github.git.deleteRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: "tags/${{ env.TAG_2 }}"
                });
            } catch(e) {
                console.log('Tag does not exist yet: ' + e);
            }
            github.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "refs/tags/${{ env.TAG_2 }}",
              sha: context.sha
            });

            try {
                github.git.deleteRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: "tags/${{ env.TAG_3 }}"
                });
            } catch(e) {
                console.log('Tag does not exist yet: ' + e);
            }
            github.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "refs/tags/${{ env.TAG_3 }}",
              sha: context.sha
            });
      
